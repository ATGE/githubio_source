---
title: "Advanced Quote Ordering"
description: "Place an order using a quote with SSH keys and post provisioning scripts. Along with a few examples of how to get the needed data."
date: "2016-10-05"
classes: 
    - "SoftLayer_Billing_Order_Quote"
    - "SoftLayer_Account"
    - "SoftLayer_Product_Order"
    - "SoftLayer_Location"
tags:
    - "order"
    - "quote"
    - "sshkeys"
    - "provisionScripts"
---

## Quotes

Quotes are a way to save an order, and then easily duplicate the order later. You can create a quote from the control portal by going through the normal order process, and then instead of hitting "Order" at the end, there will be a button that says "Save Quote", which will save the order for later. You can then use the quote service to pull down the information about it from the API. `listQuotes` in the example below does exactly this.

To order from a quote you will need the following bits of information
- Quote ID
- Datacenter ID where you want the order to end up
- Other bits of optional data, like SSH keys, vlan ids, image ids, etc.

### REST API Call
`curl -u $SL_USER:$SL_APIKEY 'https://api.softlayer.com/rest/v3.1/SoftLayer_Account/getActiveQuotes.json?objectMask=mask%5Border%5Bid%2C+orderTotalAmount%2C+orderTopLevelItems%5Bid%2C+description%5D%5D%2C+ordersFromQuoteCount%5D'`

### Python Output
The sample code will output something like this. Quotes can be PENDING, which means they might expire if you don't call [SoftLayer_Billing_Order_Quote::saveQuote(id=quoteId)](https://softlayer.github.io/reference/services/SoftLayer_Billing_Order_Quote/saveQuote/) before its expiration date. SAVED quotes will stick around until you call [SoftLayer_Billing_Order_Quote::deleteQuote(id=quoteId)](https://softlayer.github.io/reference/services/SoftLayer_Billing_Order_Quote/deleteQuote/)
The quoteId in the first column is what will be used for placing the order. Description is just the topLevelBillingItem for the quote.

```shell
ID, createDate, name, status, order count, description
2460465, 2018-07-23T14:20:59-06:00, Ruber, SAVED, 0, Single Intel Xeon E3-1270 v3 (4 Cores, 3.50 GHz)
2457385, 2018-07-17T14:23:54-06:00, AJCB-TESTWITHSSHKEYS, PENDING, 0, Single Intel Xeon E3-1270 v3 (4 Cores, 3.50 GHz)
1528487, 2015-09-25T15:37:27-06:00, test-quote, SAVED, 3, 1 x 2.0 GHz Core
```

## 

```python
import SoftLayer
from pprint import pprint as pp

class example():

    def __init__(self):
        self.client = SoftLayer.Client()
        debugger = SoftLayer.DebugTransport(self.client.transport)
        self.client.transport = debugger

    def orderQuote(self, quote_id, dc_id = None, image_id = None, private_vlan = None, public_vlan = None):
        # If you have more than 1 server in the quote, you will need to append
        # a copy of this for each VSI, with hostnames changed as needed
        guests = {
            'hostname': 'quotetest', 
            'domain': 'example.com'
        }
        if public_vlan:
            guests.update({
                'primaryNetworkComponent': {
                    "networkVlan": {"id": int(public_vlan)}}})
        if private_vlan:
            guests.update({
                "primaryBackendNetworkComponent": {
                    "networkVlan": {"id": int(private_vlan)}}})

        quote = self.client['Billing_Order_Quote']
        quote_container = quote.getRecalculatedOrderContainer(id=quote_id)

        container = quote_container
        container['quantity'] = 1
        container['virtualGuests'] = []
        container['virtualGuests'].append(guests)

        # container['provisionScripts'] = ['https://gist.githubusercontent.com/myscript.py']
        # container['sshKeys'] = [{'sshKeyIds': [660791]} ]

        if image_id is not None:
            container['imageTemplateId'] = image_id

        if dc_id is not None:
            container['location'] = dc_id

        result = self.client['Product_Order'].verifyOrder(container)
        # result = self.client['Product_Order'].placeOrder(container)
        pp(result)

    def listQuotes(self):
        # https://softlayer.github.io/reference/datatypes/SoftLayer_Billing_Order_Quote/
        mask = "mask[order[id, orderTotalAmount, orderTopLevelItems[id, description]], ordersFromQuoteCount]"
        quotes = self.client['SoftLayer_Account'].getActiveQuotes(mask=mask)
        print("ID, createDate, name, status, order count, description")
        for quote in quotes:
            print("{}, {}, {}, {}, {}, {}".format(
                quote['id'], quote['createDate'], quote['name'], quote['status'], 
                quote['ordersFromQuoteCount'], quote['order']['orderTopLevelItems'][0]['description'])
            )

    def listLocations(self):
        locations = self.client['SoftLayer_Location'].getDatacenters()
        pp(locations)

    def listLocationsForQuote(self, quoteId):
        mask="mask[id, order[id, orderTopLevelItems[id, package[id, availableLocations]]]]"
        locations = self.client['Billing_Order_Quote'].getObject(id=quoteId, mask=mask)
        pp(locations)

    def listSshKeys(self):
        keys = self.client['SoftLayer_Account'].getSshKeys()
        pp(keys)

    def listImageTemplates(self):
        mask = "mask[id,name,note]"
        imageTemplates = self.client['SoftLayer_Account'].getPrivateBlockDeviceTemplateGroups(mask=mask)
        print("ID - Name - Note")
        for template in imageTemplates:
            try:
                print("%s - %s - %s" % (template['id'], template['name'], template['note']))
            except KeyError:
                print("%s - %s - %s" % (template['id'], template['name'], 'None'))

    def listVlansInLocation(self, location_id):
        mask = "mask[id,vlanNumber,primaryRouter[hostname,datacenter[id,name]]]"
        objfilter2 = { "networkVlans":    
                        {"primaryRouter": 
                            {"datacenter": { "id" : {"operation":location_id} } }
                        }
                    }
        subnets = self.client['SoftLayer_Account'].getNetworkVlans(mask=mask,filter=objfilter2)
        for subnet in subnets:
            print("%s, %s, %s" % ( subnet['id'], subnet['vlanNumber'], subnet['primaryRouter']['hostname']))

    def debug(self):
        for call in self.client.transport.get_last_calls():
            print(self.client.transport.print_reproduceable(call))


if __name__ == "__main__":
    quote_id = 1528487
    main = example()
    # main.listImageTemplates()
    # main.listQuotes()
    main.listLocationsForQuote(quote_id)
    # main.listLocations()
    dal13 = 1854895
    ams03 = 814994
    dal09 = 449494
    # main.listSshKeys()
    # main.listVlansInLocation(dal13)
    backend_vlan = 1400000 # 123, bcr06a.dal09
    front_vlan = 1400001 # 456, fcr06a.dal09
    # main.orderQuote(quote_id, dc_id=dal09, private_vlan=backend_vlan,public_vlan=front_vlan )
    main.debug()

```
